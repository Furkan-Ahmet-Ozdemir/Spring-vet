pipeline {
    agent any
    
    environment {
        DOCKER_IMAGE = 'willtreatyy/basic-spring-boot-docker'
        DOCKER_TAG = "${BUILD_NUMBER}"
        KUBECONFIG_CREDENTIAL_ID = 'kubeconfig'
        DOCKER_CREDENTIAL_ID = 'docker-hub-credentials'
    }
    
    stages {
        stage('Checkout') {
            steps {
                // GitHub'dan kod çekme (otomatik olarak yapılır)
                echo 'Kod başarıyla çekildi'
            }
        }
        
        stage('Test') {
            steps {
                // Maven ile testleri çalıştırma
                sh './mvnw clean test'
            }
            post {
                always {
                    // Test sonuçlarını Jenkins'e kaydetme
                    publishTestResults testResultsPattern: 'target/surefire-reports/*.xml'
                }
            }
        }
        
        stage('Build JAR') {
            steps {
                // Uygulamayı build etme
                sh './mvnw clean package -DskipTests'
            }
        }
        
        stage('Build Docker Image') {
            steps {
                script {
                    // Docker image'ını build etme
                    docker.build("${DOCKER_IMAGE}:${DOCKER_TAG}")
                    docker.build("${DOCKER_IMAGE}:latest")
                }
            }
        }
        
        stage('Push Docker Image') {
            steps {
                script {
                    // Docker Hub'a image push etme
                    docker.withRegistry('https://registry.hub.docker.com', DOCKER_CREDENTIAL_ID) {
                        docker.image("${DOCKER_IMAGE}:${DOCKER_TAG}").push()
                        docker.image("${DOCKER_IMAGE}:latest").push()
                    }
                }
            }
        }
        
        stage('Deploy to Kubernetes') {
            steps {
                // Kubernetes'e deploy etme
                withCredentials([kubeconfigFile(credentialsId: KUBECONFIG_CREDENTIAL_ID, variable: 'KUBECONFIG')]) {
                    sh """
                        sed -i 's|IMAGE_TAG|${DOCKER_TAG}|g' k8s/deployment.yaml
                        kubectl apply -f k8s/
                    """
                }
            }
        }
    }
    
    post {
        always {
            // Build sonrası temizlik
            sh 'docker system prune -f'
        }
        success {
            echo 'Pipeline başarıyla tamamlandı!'
        }
        failure {
            echo 'Pipeline başarısız oldu!'
        }
    }
}